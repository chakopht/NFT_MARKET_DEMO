// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Packed extends ethereum.Event {
  get params(): Packed__Params {
    return new Packed__Params(this);
  }
}

export class Packed__Params {
  _event: Packed;

  constructor(event: Packed) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get flag(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Purchased extends ethereum.Event {
  get params(): Purchased__Params {
    return new Purchased__Params(this);
  }
}

export class Purchased__Params {
  _event: Purchased;

  constructor(event: Purchased) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unpacked extends ethereum.Event {
  get params(): Unpacked__Params {
    return new Unpacked__Params(this);
  }
}

export class Unpacked__Params {
  _event: Unpacked;

  constructor(event: Unpacked) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketPlace__nftsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getSeller(): Address {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getNft(): Address {
    return this.value3;
  }
}

export class MarketPlace extends ethereum.SmartContract {
  static bind(address: Address): MarketPlace {
    return new MarketPlace("MarketPlace", address);
  }

  nfts(param0: Address, param1: BigInt): MarketPlace__nftsResult {
    let result = super.call(
      "nfts",
      "nfts(address,uint256):(address,uint256,uint256,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new MarketPlace__nftsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
    );
  }

  try_nfts(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<MarketPlace__nftsResult> {
    let result = super.tryCall(
      "nfts",
      "nfts(address,uint256):(address,uint256,uint256,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketPlace__nftsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
      ),
    );
  }
}

export class BuyNFTCall extends ethereum.Call {
  get inputs(): BuyNFTCall__Inputs {
    return new BuyNFTCall__Inputs(this);
  }

  get outputs(): BuyNFTCall__Outputs {
    return new BuyNFTCall__Outputs(this);
  }
}

export class BuyNFTCall__Inputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyNFTCall__Outputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }
}

export class TakePackCall extends ethereum.Call {
  get inputs(): TakePackCall__Inputs {
    return new TakePackCall__Inputs(this);
  }

  get outputs(): TakePackCall__Outputs {
    return new TakePackCall__Outputs(this);
  }
}

export class TakePackCall__Inputs {
  _call: TakePackCall;

  constructor(call: TakePackCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TakePackCall__Outputs {
  _call: TakePackCall;

  constructor(call: TakePackCall) {
    this._call = call;
  }
}

export class UnPackCall extends ethereum.Call {
  get inputs(): UnPackCall__Inputs {
    return new UnPackCall__Inputs(this);
  }

  get outputs(): UnPackCall__Outputs {
    return new UnPackCall__Outputs(this);
  }
}

export class UnPackCall__Inputs {
  _call: UnPackCall;

  constructor(call: UnPackCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnPackCall__Outputs {
  _call: UnPackCall;

  constructor(call: UnPackCall) {
    this._call = call;
  }
}
